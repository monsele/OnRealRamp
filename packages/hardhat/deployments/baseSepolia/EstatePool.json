{
  "address": "0x796fa16c03112F665dd895b4b2023de0aFe4cdb8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EstatePool__TransactionFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "TokenBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "TokenListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AuctionAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchaseAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedPay",
          "type": "uint256"
        }
      ],
      "name": "BuyPlot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "Id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBought",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalPlots",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amtToSell",
          "type": "uint256"
        },
        {
          "internalType": "enum EstatePool.EstateType",
          "name": "estateType",
          "type": "uint8"
        }
      ],
      "name": "CreateAsset",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "Name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "Id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "Owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "TotalPlots",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "AmountToBeSold",
              "type": "uint256"
            },
            {
              "internalType": "enum EstatePool.EstateType",
              "name": "Type",
              "type": "uint8"
            }
          ],
          "internalType": "struct EstatePool.TokenData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GetAuctionCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "GetAvailableTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GetListedTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "Name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "Id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "Owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "TotalPlots",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "AmountToBeSold",
              "type": "uint256"
            },
            {
              "internalType": "enum EstatePool.EstateType",
              "name": "Type",
              "type": "uint8"
            }
          ],
          "internalType": "struct EstatePool.TokenData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GetTokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "GetUserTokensData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "Name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "Description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amountOwned",
              "type": "uint256"
            }
          ],
          "internalType": "struct EstatePool.UserTokenData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToPay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "PayBid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "TokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "AmountToSell",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "Owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "availaibleTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenDataMapping",
      "outputs": [
        {
          "internalType": "string",
          "name": "Name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "Id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "Owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "TotalPlots",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "AmountToBeSold",
          "type": "uint256"
        },
        {
          "internalType": "enum EstatePool.EstateType",
          "name": "Type",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x82151609329d5dfb068995c752d71caf4f12299466de2442145b37ff895bd1c4",
  "receipt": {
    "to": null,
    "from": "0x133bC7a7EA1E1A5B03D67c1Fe09039c9520D5104",
    "contractAddress": "0x796fa16c03112F665dd895b4b2023de0aFe4cdb8",
    "transactionIndex": 6,
    "gasUsed": "2546595",
    "logsBloom": "0x
    "blockHash": "0x340b3c45ac147c428d77f36dcb6e7631dbf8a72ae9e6503818b6018f21fefd3e",
    "transactionHash": "0x82151609329d5dfb068995c752d71caf4f12299466de2442145b37ff895bd1c4",
    "logs": [],
    "blockNumber": 12019442,
    "cumulativeGasUsed": "6181415",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://packets.vercel.app/api/properties/metadata/{id}"
  ],
  "numDeployments": 1,
  "solcInputHash": "6047fe6448cde79c01db3508ea0b95fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EstatePool__TransactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"TokenBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedPay\",\"type\":\"uint256\"}],\"name\":\"BuyPlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBought\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalPlots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtToSell\",\"type\":\"uint256\"},{\"internalType\":\"enum EstatePool.EstateType\",\"name\":\"estateType\",\"type\":\"uint8\"}],\"name\":\"CreateAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"TotalPlots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AmountToBeSold\",\"type\":\"uint256\"},{\"internalType\":\"enum EstatePool.EstateType\",\"name\":\"Type\",\"type\":\"uint8\"}],\"internalType\":\"struct EstatePool.TokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetAuctionCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"GetAvailableTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetListedTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"TotalPlots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AmountToBeSold\",\"type\":\"uint256\"},{\"internalType\":\"enum EstatePool.EstateType\",\"name\":\"Type\",\"type\":\"uint8\"}],\"internalType\":\"struct EstatePool.TokenData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetTokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"GetUserTokensData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountOwned\",\"type\":\"uint256\"}],\"internalType\":\"struct EstatePool.UserTokenData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"PayBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AmountToSell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availaibleTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenDataMapping\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"TotalPlots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AmountToBeSold\",\"type\":\"uint256\"},{\"internalType\":\"enum EstatePool.EstateType\",\"name\":\"Type\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"BuyPlot(uint256,uint256,uint256)\":{\"params\":{\"expectedPay\":\"This is the expected amount the user should send to the smart contract\",\"purchaseAmt\":\"this is the amount of uints that the user wants to purchase\",\"tokenId\":\"this is the Id of the token on the ListedToken array\"},\"returns\":{\"Id\":\"this holds the return value of the token that was bought\",\"amountBought\":\"this holds the value of the token that was successfully bought\"}},\"CreateAsset(string,uint256,uint256,uint8)\":{\"params\":{\"amtToSell\":\"Amount willing to see to investors\",\"estateType\":\"Estate Type enum\",\"name\":\"The name of asset\",\"totalPlots\":\"Total availiable plots\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"auction\":{\"details\":\"This mapping is for tracking Auctions \"},\"availaibleTokenAmount\":{\"details\":\"mapping of tokenId to amount sold\"},\"tokenDataMapping\":{\"details\":\"This mapping is the mapping of tokenId to TokenData\"},\"tokenMapping\":{\"details\":\"Mapping for tokenId -> tokendata\"},\"totalYields\":{\"details\":\"This is the user's total yields gained\"},\"userTokens\":{\"details\":\"This ties all the users to their respective tokens\"},\"userTvl\":{\"details\":\"This refers to the user's total value bought\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CreateAsset(string,uint256,uint256,uint8)\":{\"notice\":\"function to list and provide tokens of an asset\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EstatePool.sol\":\"EstatePool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\n pragma solidity ^0.8.0;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x7da5ab1ff7d922b4162149a3e5d05404abc7202b781e2b1008f6f48d8cf638ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/EstatePool.sol\":{\"content\":\"  // SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\\\";\\r\\n\\r\\ncontract EstatePool is ERC1155, ERC1155Holder, ERC1155Receiver {\\r\\n\\t//////////////////\\r\\n\\t/////ERRORS/////\\r\\n\\terror EstatePool__TransactionFailed();\\r\\n\\t///////////////////\\r\\n\\t// State Variables\\r\\n\\t///////////////////\\r\\n\\tTokenData[] private ListedTokens;\\r\\n\\tuint256 private tokenCounter;\\r\\n    uint256 private auctionCounter;\\r\\n\\t/// @dev mapping of tokenId to amount sold\\r\\n\\tmapping(uint256 => uint256) public availaibleTokenAmount;\\r\\n\\t///@dev Mapping for tokenId -> tokendata\\r\\n\\tmapping(uint256 => TokenData) tokenMapping;\\r\\n\\t/// @dev This refers to the user's total value bought\\r\\n\\tmapping(address => uint) userTvl;\\r\\n\\t/// @dev This is the user's total yields gained\\r\\n\\tmapping(address => uint) totalYields;\\r\\n\\t/// @dev This ties all the users to their respective tokens\\r\\n\\tmapping(address => TokenData[]) private userTokens;\\r\\n\\t/// @dev This mapping is the mapping of tokenId to TokenData\\r\\n\\tmapping(uint256 => TokenData) public tokenDataMapping;\\r\\n\\t/// @dev This mapping is for tracking Auctions \\r\\n\\tmapping(uint256 => AuctionData) public auction;\\r\\n\\t///////////////////\\r\\n\\t/////MODIFIERS/////\\r\\n\\r\\n\\t///////////////////\\r\\n\\t// Events\\r\\n\\t///////////////////\\r\\n\\tevent TokenListed(\\r\\n\\t\\taddress indexed owner,\\r\\n\\t\\tstring indexed name,\\r\\n\\t\\tuint256 indexed id\\r\\n\\t);\\r\\n\\tevent TokenBought(\\r\\n\\t\\taddress indexed from,\\r\\n\\t\\taddress indexed to,\\r\\n\\t\\tuint256 indexed tokenid\\r\\n\\t);\\r\\n\\tevent AuctionCreated(\\r\\n\\t\\taddress indexed creator,\\r\\n\\t\\tuint256 indexed tokenId,\\r\\n\\t\\tuint256 amount\\r\\n\\t);\\r\\n\\r\\n\\tfunction supportsInterface(\\r\\n\\t\\tbytes4 interfaceId\\r\\n\\t)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\tvirtual\\r\\n\\t\\toverride(ERC1155, ERC1155Receiver, ERC1155Holder)\\r\\n\\t\\treturns (bool)\\r\\n\\t{\\r\\n\\t\\treturn super.supportsInterface(interfaceId);\\r\\n\\t}\\r\\n\\r\\n\\tconstructor(string memory _uri) ERC1155(_uri) {\\r\\n\\t\\t//https://myapp.com/{tokenId}\\r\\n\\t\\t_setURI(_uri);\\r\\n\\t\\ttokenCounter = 0;\\r\\n        auctionCounter = 0;\\r\\n\\t}\\r\\n\\r\\n\\tstruct TokenData {\\r\\n\\t\\tstring Name;\\r\\n\\t\\tuint256 Id;\\r\\n\\t\\taddress Owner;\\r\\n\\t\\tuint256 TotalPlots;\\r\\n\\t\\tuint256 AmountToBeSold;\\r\\n\\t\\tEstateType Type;\\r\\n\\t}\\r\\n\\tstruct UserTokenData {\\r\\n\\t\\t// TokenData tokenData;\\r\\n\\t\\tuint256 tokenId;\\r\\n\\t\\tstring Name;\\r\\n\\t\\tstring Description;\\r\\n\\t\\tuint256 amountOwned;\\r\\n\\t}\\r\\n\\tstruct AuctionData {\\r\\n\\t\\tuint256 TokenId;\\r\\n\\t\\tuint256 AmountToSell;\\r\\n\\t\\taddress Owner;\\r\\n        uint256 auctionId;\\r\\n        bool completed;\\r\\n\\t}\\r\\n\\tenum EstateType {\\r\\n\\t\\tLand,\\r\\n\\t\\tHouses,\\r\\n\\t\\tCommercial,\\r\\n\\t\\tApartMent\\r\\n\\t}\\r\\n\\r\\n\\t/// function to list and provide tokens of an asset\\r\\n\\t/// @param name The name of asset\\r\\n\\t/// @param totalPlots Total availiable plots\\r\\n\\t/// @param amtToSell Amount willing to see to investors\\r\\n\\t/// @param estateType Estate Type enum\\r\\n\\tfunction CreateAsset(\\r\\n\\t\\tstring memory name,\\r\\n\\t\\tuint256 totalPlots,\\r\\n\\t\\tuint256 amtToSell,\\r\\n\\t\\tEstateType estateType\\r\\n\\t) external returns (TokenData memory) {\\r\\n\\t\\ttokenCounter = GetTokenCounter() + 1;\\r\\n\\t\\tTokenData memory tokenData = TokenData(\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\ttokenCounter,\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\ttotalPlots,\\r\\n\\t\\t\\tamtToSell,\\r\\n\\t\\t\\testateType\\r\\n\\t\\t);\\r\\n\\t\\t_mint(msg.sender, tokenCounter, totalPlots, \\\"\\\");\\r\\n\\t\\tListedTokens.push(tokenData);\\r\\n\\t\\tavailaibleTokenAmount[tokenCounter] = amtToSell;\\r\\n\\t\\ttokenMapping[tokenCounter] = tokenData;\\r\\n\\t\\t_setApprovalForAll(msg.sender, address(this), true);\\r\\n\\t\\temit TokenListed(tokenData.Owner, tokenData.Name, tokenData.Id);\\r\\n\\t\\treturn tokenData;\\r\\n\\t}\\r\\n\\r\\n\\t///\\r\\n\\t/// @param tokenId  this is the Id of the token on the ListedToken array\\r\\n\\t/// @param purchaseAmt this is the amount of uints that the user wants to purchase\\r\\n\\t/// @param expectedPay This is the expected amount the user should send to the smart contract\\r\\n\\t/// @return Id this holds the return value of the token that was bought\\r\\n\\t/// @return amountBought this holds the value of the token that was successfully bought\\r\\n\\tfunction BuyPlot(\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\tuint256 purchaseAmt,\\r\\n\\t\\tuint256 expectedPay\\r\\n\\t) external payable returns (uint256 Id, uint256 amountBought) {\\r\\n\\t\\t///@notice expected pay should be the converted value of the eth price to wei as wei is the value of msg.value\\r\\n\\t\\trequire(\\r\\n\\t\\t\\texpectedPay >= msg.value,\\r\\n\\t\\t\\t\\\"The amount sent is not enough for purchase\\\"\\r\\n\\t\\t);\\r\\n        \\r\\n\\t\\tTokenData memory data = tokenMapping[tokenId];\\r\\n        require(msg.sender != data.Owner, \\\"Owner Cannot buy listed property\\\");\\r\\n\\t\\tuint256 availiableAmt = availaibleTokenAmount[tokenId];\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tpurchaseAmt <= availiableAmt,\\r\\n\\t\\t\\t\\\"Purchase amount exceeds the availiable amount\\\"\\r\\n\\t\\t);\\r\\n\\t\\taddress recipient = data.Owner;\\r\\n\\t\\t(bool success, ) = recipient.call{ value: msg.value }(\\\"\\\");\\r\\n\\t\\trequire(success, \\\"ETH transfer failed\\\");\\r\\n\\t\\t_safeTransferFrom(recipient, msg.sender, tokenId, purchaseAmt, \\\"0x\\\");\\r\\n\\t\\tavailaibleTokenAmount[tokenId] =\\r\\n\\t\\t\\tavailaibleTokenAmount[tokenId] -\\r\\n\\t\\t\\tpurchaseAmt;\\r\\n\\t\\tuserTvl[msg.sender] = userTvl[msg.sender] + msg.value;\\r\\n\\t\\t//userTokens[msg.sender] = userTokens[msg.sender].push(data);\\r\\n\\t\\tuserTokens[msg.sender].push(data);\\r\\n\\t\\temit TokenBought(recipient, msg.sender, tokenId);\\r\\n\\t\\tId = tokenId;\\r\\n\\t\\tamountBought = purchaseAmt;\\r\\n\\t}\\r\\n\\r\\n\\tfunction AuctionAsset(\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\tuint256 amount\\r\\n\\t) external returns (bool,uint256) {\\r\\n        uint256 auctionId = GetAuctionCounter()+1;\\r\\n\\t\\t_safeTransferFrom(msg.sender, address(this), tokenId, amount, \\\"0x\\\");\\r\\n\\t\\tauction[auctionId] = AuctionData(tokenId, amount, msg.sender,auctionId,false);\\r\\n\\t\\temit AuctionCreated(msg.sender, tokenId, amount);\\r\\n\\t\\treturn (true,auctionId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction PayBid(\\r\\n\\t\\tuint256 amountToPay,\\r\\n\\t\\tuint256 auctionId\\r\\n\\t) external payable returns (bool) {\\r\\n\\t\\trequire(msg.value >= amountToPay, \\\"Invalid Amount\\\");\\r\\n\\t\\tAuctionData memory auctionData = auction[auctionId];\\r\\n        require(auctionData.completed == false, \\\"Auction is already completed\\\");\\r\\n\\t\\tuint256 amountToSell = auctionData.AmountToSell;\\r\\n\\t\\taddress owner = auctionData.Owner;\\r\\n\\t\\tuint256 tokenId = auctionData.TokenId;\\r\\n\\t\\t(bool success, ) = owner.call{ value: msg.value }(\\\"\\\");\\r\\n\\t\\trequire(success, \\\"Eth transaction fails\\\");\\r\\n\\t\\t//transfer to the tokens to the bidder\\r\\n\\t\\t_safeTransferFrom(\\r\\n\\t\\t\\taddress(this),\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\ttokenId,\\r\\n\\t\\t\\tamountToSell,\\r\\n\\t\\t\\t\\\"0x\\\"\\r\\n\\t\\t);\\r\\n        auctionData.completed=true;\\r\\n        auction[auctionId] = auctionData;\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction GetListedTokens() external view returns (TokenData[] memory) {\\r\\n\\t\\treturn ListedTokens;\\r\\n\\t}\\r\\n\\r\\n\\tfunction GetAvailableTokenAmount(\\r\\n\\t\\tuint256 tokenId\\r\\n\\t) external view returns (uint256) {\\r\\n\\t\\treturn availaibleTokenAmount[tokenId];\\r\\n\\t}\\r\\n\\r\\n\\tfunction GetUserTokensData(\\r\\n\\t\\taddress user\\r\\n\\t) external view returns (UserTokenData[] memory) {\\r\\n\\t\\tTokenData[] memory userTokenData = userTokens[user];\\r\\n\\t\\tUserTokenData[] memory userTokenInfo = new UserTokenData[](\\r\\n\\t\\t\\tuserTokenData.length\\r\\n\\t\\t);\\r\\n\\t\\tuint256 tokenBalance = 0;\\r\\n\\t\\tfor (uint i = 0; i < userTokenData.length; i++) {\\r\\n\\t\\t\\tTokenData memory data = userTokenData[i];\\r\\n\\t\\t\\ttokenBalance = balanceOf(user, data.Id);\\r\\n\\t\\t\\tuserTokenInfo[i] = UserTokenData(\\r\\n\\t\\t\\t\\tdata.Id,\\r\\n\\t\\t\\t\\tdata.Name,\\r\\n\\t\\t\\t\\tdata.Name,\\r\\n\\t\\t\\t\\ttokenBalance\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\t\\treturn userTokenInfo;\\r\\n\\t}\\r\\n\\r\\n\\t// function GetAuctionStatus(uint256 auctionId)  returns (bool) {\\r\\n\\r\\n\\t// }\\r\\n\\tfunction GetTokenCounter() public view returns (uint256) {\\r\\n\\t\\treturn tokenCounter;\\r\\n\\t}\\r\\n    function GetAuctionCounter() public view returns (uint256) {\\r\\n\\t\\treturn auctionCounter;\\r\\n\\t}\\r\\n\\r\\n\\treceive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x5889685562fa00b48b997baedb5023d2c21a3b20e2826521dcfca5c7bdd10509\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002e5438038062002e54833981016040819052620000349162000085565b8062000040816200005d565b506200004c816200005d565b5060006004819055600555620002b5565b60026200006b8282620001e9565b5050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200009957600080fd5b82516001600160401b0380821115620000b157600080fd5b818501915085601f830112620000c657600080fd5b815181811115620000db57620000db6200006f565b604051601f8201601f19908116603f011681019083821181831017156200010657620001066200006f565b8160405282815288868487010111156200011f57600080fd5b600093505b8284101562000143578484018601518185018701529285019262000124565b600086848301015280965050505050505092915050565b600181811c908216806200016f57607f821691505b6020821081036200019057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001e457600081815260208120601f850160051c81016020861015620001bf5750805b601f850160051c820191505b81811015620001e057828155600101620001cb565b5050505b505050565b81516001600160401b038111156200020557620002056200006f565b6200021d816200021684546200015a565b8462000196565b602080601f8311600181146200025557600084156200023c5750858301515b600019600386901b1c1916600185901b178555620001e0565b600085815260208120601f198616915b82811015620002865788860151825594840194600190910190840162000265565b5085821015620002a55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612b8f80620002c56000396000f3fe6080604052600436106101385760003560e01c8063bc197c81116100ab578063e70572f51161006f578063e70572f514610466578063e985e9c514610493578063f17e9b03146104dc578063f23a6e61146104ef578063f242432a1461051b578063f54b419f1461053b57600080fd5b8063bc197c8114610378578063ca7b4a13146103bd578063d066510a146103df578063d0900e1114610411578063e609b6e11461043957600080fd5b80631e53dff0116100fd5780631e53dff01461029a57806324633568146102c75780632eb2c2d6146102dc5780634e1273f4146102fe5780638ca660a71461032b578063a22cb4651461035857600080fd5b8062fdd58e1461014457806301ffc9a7146101775780630e89341c146101a75780631200617f146101d4578063193970db1461026357600080fd5b3661013f57005b600080fd5b34801561015057600080fd5b5061016461015f366004611f38565b610550565b6040519081526020015b60405180910390f35b34801561018357600080fd5b50610197610192366004611f7b565b6105e9565b604051901515815260200161016e565b3480156101b357600080fd5b506101c76101c2366004611f9f565b6105f4565b60405161016e9190612008565b3480156101e057600080fd5b5061022b6101ef366004611f9f565b600c6020526000908152604090208054600182015460028301546003840154600490940154929391926001600160a01b03909116919060ff1685565b6040805195865260208601949094526001600160a01b039092169284019290925260608301919091521515608082015260a00161016e565b34801561026f57600080fd5b5061028361027e36600461201b565b610688565b60408051921515835260208301919091520161016e565b3480156102a657600080fd5b506101646102b5366004611f9f565b60066020526000908152604090205481565b3480156102d357600080fd5b50600454610164565b3480156102e857600080fd5b506102fc6102f7366004612193565b61078a565b005b34801561030a57600080fd5b5061031e61031936600461223d565b6107d6565b60405161016e9190612343565b34801561033757600080fd5b50610164610346366004611f9f565b60009081526006602052604090205490565b34801561036457600080fd5b506102fc610373366004612356565b610900565b34801561038457600080fd5b506103a4610393366004612193565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161016e565b3480156103c957600080fd5b506103d261090f565b60405161016e9190612423565b3480156103eb57600080fd5b506103ff6103fa366004611f9f565b610a64565b60405161016e96959493929190612485565b61042461041f3660046124d6565b610b2e565b6040805192835260208301919091520161016e565b34801561044557600080fd5b50610459610454366004612502565b610f7e565b60405161016e919061257d565b34801561047257600080fd5b50610486610481366004612590565b6111e1565b60405161016e91906125ab565b34801561049f57600080fd5b506101976104ae366004612647565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101976104ea36600461201b565b611462565b3480156104fb57600080fd5b506103a461050a36600461267a565b63f23a6e6160e01b95945050505050565b34801561052757600080fd5b506102fc61053636600461267a565b611692565b34801561054757600080fd5b50600554610164565b60006001600160a01b0383166105c05760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006105e3826116d7565b606060028054610603906126df565b80601f016020809104026020016040519081016040528092919081815260200182805461062f906126df565b801561067c5780601f106106515761010080835404028352916020019161067c565b820191906000526020600020905b81548152906001019060200180831161065f57829003601f168201915b50505050509050919050565b600080600061069660055490565b6106a190600161272f565b90506106ca3330878760405180604001604052806002815260200161060f60f31b8152506116fc565b6040805160a08101825286815260208082018781523383850181815260608501878152600060808701818152898252600c875290889020965187559351600187015590516002860180546001600160a01b0319166001600160a01b0390921691909117905551600385015590516004909301805460ff191693151593909317909255915186815287927f4560b4b4d2eec0d9c2feb420083427dbdb8371b8df7fc5471791ebe492622f69910160405180910390a360019590945092505050565b6001600160a01b0385163314806107a657506107a685336104ae565b6107c25760405162461bcd60e51b81526004016105b790612742565b6107cf8585858585611826565b5050505050565b6060815183511461083b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105b7565b6000835167ffffffffffffffff8111156108575761085761203d565b604051908082528060200260200182016040528015610880578160200160208202803683370190505b50905060005b84518110156108f8576108cb8582815181106108a4576108a4612790565b60200260200101518583815181106108be576108be612790565b6020026020010151610550565b8282815181106108dd576108dd612790565b60209081029190910101526108f1816127a6565b9050610886565b509392505050565b61090b338383611a03565b5050565b60606003805480602002602001604051908101604052809291908181526020016000905b82821015610a5b57838290600052602060002090600602016040518060c0016040529081600082018054610966906126df565b80601f0160208091040260200160405190810160405280929190818152602001828054610992906126df565b80156109df5780601f106109b4576101008083540402835291602001916109df565b820191906000526020600020905b8154815290600101906020018083116109c257829003601f168201915b50505091835250506001820154602082015260028201546001600160a01b03166040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115610a3757610a37612392565b6003811115610a4857610a48612392565b8152505081526020019060010190610933565b50505050905090565b600b60205260009081526040902080548190610a7f906126df565b80601f0160208091040260200160405190810160405280929190818152602001828054610aab906126df565b8015610af85780601f10610acd57610100808354040283529160200191610af8565b820191906000526020600020905b815481529060010190602001808311610adb57829003601f168201915b5050506001840154600285015460038601546004870154600590970154959692956001600160a01b039092169450925060ff1686565b60008034831015610b945760405162461bcd60e51b815260206004820152602a60248201527f54686520616d6f756e742073656e74206973206e6f7420656e6f75676820666f6044820152697220707572636861736560b01b60648201526084016105b7565b600085815260076020526040808220815160c08101909252805482908290610bbb906126df565b80601f0160208091040260200160405190810160405280929190818152602001828054610be7906126df565b8015610c345780601f10610c0957610100808354040283529160200191610c34565b820191906000526020600020905b815481529060010190602001808311610c1757829003601f168201915b50505091835250506001820154602082015260028201546001600160a01b03166040820152600380830154606083015260048301546080830152600583015460a09092019160ff1690811115610c8c57610c8c612392565b6003811115610c9d57610c9d612392565b90525060408101519091506001600160a01b03163303610cff5760405162461bcd60e51b815260206004820181905260248201527f4f776e65722043616e6e6f7420627579206c69737465642070726f706572747960448201526064016105b7565b60008681526006602052604090205480861115610d745760405162461bcd60e51b815260206004820152602d60248201527f507572636861736520616d6f756e74206578636565647320746865206176616960448201526c1b1a58589b1948185b5bdd5b9d609a1b60648201526084016105b7565b60408083015190516000906001600160a01b0383169034908381818185875af1925050503d8060008114610dc4576040519150601f19603f3d011682016040523d82523d6000602084013e610dc9565b606091505b5050905080610e105760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b60448201526064016105b7565b610e3782338b8b60405180604001604052806002815260200161060f60f31b8152506116fc565b600089815260066020526040902054610e519089906127bf565b60008a815260066020908152604080832093909355338252600890522054610e7a90349061272f565b33600090815260086020908152604080832093909355600a8152918120805460018101825590825291902085518692600602909101908190610ebc908261281d565b506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836003811115610f3257610f32612392565b0217905550506040518a915033906001600160a01b038516907f9b24bd0884170cbce51f9f00df6b3f9aed2231e4086241d1d04687b42afdf7b990600090a45096979596505050505050565b610f86611ecd565b600454610f9490600161272f565b60048190555060006040518060c001604052808781526020016004548152602001336001600160a01b03168152602001868152602001858152602001846003811115610fe257610fe2612392565b8152509050611004336004548760405180602001604052806000815250611ae3565b60038054600181018255600091909152815182916006027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190819061104a908261281d565b506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908360038111156110c0576110c0612392565b021790555050600480546000908152600660209081526040808320899055925482526007905220825183925081906110f8908261281d565b506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083600381111561116e5761116e612392565b021790555090505061118233306001611a03565b6020810151815160405161119691906128dd565b604051809103902082604001516001600160a01b03167f62099b0d51c89afa8a30ef4da626ca4d1257a1203645ed1b5781cfca1badcdb360405160405180910390a495945050505050565b6001600160a01b0381166000908152600a60209081526040808320805482518185028101850190935280835260609493849084015b8282101561133e57838290600052602060002090600602016040518060c0016040529081600082018054611249906126df565b80601f0160208091040260200160405190810160405280929190818152602001828054611275906126df565b80156112c25780601f10611297576101008083540402835291602001916112c2565b820191906000526020600020905b8154815290600101906020018083116112a557829003601f168201915b50505091835250506001820154602082015260028201546001600160a01b03166040820152600380830154606083015260048301546080830152600583015460a09092019160ff169081111561131a5761131a612392565b600381111561132b5761132b612392565b8152505081526020019060010190611216565b5050505090506000815167ffffffffffffffff8111156113605761136061203d565b6040519080825280602002602001820160405280156113bc57816020015b6113a96040518060800160405280600081526020016060815260200160608152602001600081525090565b81526020019060019003908161137e5790505b5090506000805b83518110156114585760008482815181106113e0576113e0612790565b602002602001015190506113f8878260200151610550565b925060405180608001604052808260200151815260200182600001518152602001826000015181526020018481525084838151811061143957611439612790565b6020026020010181905250508080611450906127a6565b9150506113c3565b5090949350505050565b6000823410156114a55760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908105b5bdd5b9d60921b60448201526064016105b7565b6000828152600c6020908152604091829020825160a0810184528154815260018201549281019290925260028101546001600160a01b0316928201929092526003820154606082015260049091015460ff16158015608083015261154b5760405162461bcd60e51b815260206004820152601c60248201527f41756374696f6e20697320616c726561647920636f6d706c657465640000000060448201526064016105b7565b6020810151604080830151835191519091906000906001600160a01b0384169034908381818185875af1925050503d80600081146115a5576040519150601f19603f3d011682016040523d82523d6000602084013e6115aa565b606091505b50509050806115f35760405162461bcd60e51b8152602060048201526015602482015274457468207472616e73616374696f6e206661696c7360581b60448201526064016105b7565b61161a3033848760405180604001604052806002815260200161060f60f31b8152506116fc565b50506001608084018181526000968752600c6020908152604097889020865181559086015181840155968501516002880180546001600160a01b0319166001600160a01b03909216919091179055606090940151600387015592516004909501805460ff191695151595909517909455509392505050565b6001600160a01b0385163314806116ae57506116ae85336104ae565b6116ca5760405162461bcd60e51b81526004016105b790612742565b6107cf85858585856116fc565b60006001600160e01b03198216630271189760e51b14806105e357506105e382611bf7565b6001600160a01b0384166117225760405162461bcd60e51b81526004016105b7906128f9565b33600061172e85611c1c565b9050600061173b85611c1c565b90506000868152602081815260408083206001600160a01b038c1684529091529020548581101561177e5760405162461bcd60e51b81526004016105b79061293e565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906117bb90849061272f565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461181b848a8a8a8a8a611c67565b505050505050505050565b81518351146118885760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016105b7565b6001600160a01b0384166118ae5760405162461bcd60e51b81526004016105b7906128f9565b3360005b84518110156119955760008582815181106118cf576118cf612790565b6020026020010151905060008583815181106118ed576118ed612790565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561193d5760405162461bcd60e51b81526004016105b79061293e565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061197a90849061272f565b925050819055505050508061198e906127a6565b90506118b2565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516119e5929190612988565b60405180910390a46119fb818787878787611dc2565b505050505050565b816001600160a01b0316836001600160a01b031603611a765760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105b7565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611b435760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016105b7565b336000611b4f85611c1c565b90506000611b5c85611c1c565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290611b8e90849061272f565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611bee83600089898989611c67565b50505050505050565b60006001600160e01b03198216630271189760e51b14806105e357506105e382611e7d565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611c5657611c56612790565b602090810291909101015292915050565b6001600160a01b0384163b156119fb5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611cab90899089908890889088906004016129b6565b6020604051808303816000875af1925050508015611ce6575060408051601f3d908101601f19168201909252611ce3918101906129f0565b60015b611d9257611cf2612a0d565b806308c379a003611d2b5750611d06612a29565b80611d115750611d2d565b8060405162461bcd60e51b81526004016105b79190612008565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105b7565b6001600160e01b0319811663f23a6e6160e01b14611bee5760405162461bcd60e51b81526004016105b790612ab3565b6001600160a01b0384163b156119fb5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611e069089908990889088908890600401612afb565b6020604051808303816000875af1925050508015611e41575060408051601f3d908101601f19168201909252611e3e918101906129f0565b60015b611e4d57611cf2612a0d565b6001600160e01b0319811663bc197c8160e01b14611bee5760405162461bcd60e51b81526004016105b790612ab3565b60006001600160e01b03198216636cdb3d1360e11b1480611eae57506001600160e01b031982166303a24d0760e21b145b806105e357506301ffc9a760e01b6001600160e01b03198316146105e3565b6040518060c00160405280606081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160006003811115611f1757611f17612392565b905290565b80356001600160a01b0381168114611f3357600080fd5b919050565b60008060408385031215611f4b57600080fd5b611f5483611f1c565b946020939093013593505050565b6001600160e01b031981168114611f7857600080fd5b50565b600060208284031215611f8d57600080fd5b8135611f9881611f62565b9392505050565b600060208284031215611fb157600080fd5b5035919050565b60005b83811015611fd3578181015183820152602001611fbb565b50506000910152565b60008151808452611ff4816020860160208601611fb8565b601f01601f19169290920160200192915050565b602081526000611f986020830184611fdc565b6000806040838503121561202e57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156120795761207961203d565b6040525050565b600067ffffffffffffffff82111561209a5761209a61203d565b5060051b60200190565b600082601f8301126120b557600080fd5b813560206120c282612080565b6040516120cf8282612053565b83815260059390931b85018201928281019150868411156120ef57600080fd5b8286015b8481101561210a57803583529183019183016120f3565b509695505050505050565b600067ffffffffffffffff83111561212f5761212f61203d565b604051612146601f8501601f191660200182612053565b80915083815284848401111561215b57600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261218457600080fd5b611f9883833560208501612115565b600080600080600060a086880312156121ab57600080fd5b6121b486611f1c565b94506121c260208701611f1c565b9350604086013567ffffffffffffffff808211156121df57600080fd5b6121eb89838a016120a4565b9450606088013591508082111561220157600080fd5b61220d89838a016120a4565b9350608088013591508082111561222357600080fd5b5061223088828901612173565b9150509295509295909350565b6000806040838503121561225057600080fd5b823567ffffffffffffffff8082111561226857600080fd5b818501915085601f83011261227c57600080fd5b8135602061228982612080565b6040516122968282612053565b83815260059390931b85018201928281019150898411156122b657600080fd5b948201945b838610156122db576122cc86611f1c565b825294820194908201906122bb565b965050860135925050808211156122f157600080fd5b506122fe858286016120a4565b9150509250929050565b600081518084526020808501945080840160005b838110156123385781518752958201959082019060010161231c565b509495945050505050565b602081526000611f986020830184612308565b6000806040838503121561236957600080fd5b61237283611f1c565b91506020830135801515811461238757600080fd5b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b600481106123c657634e487b7160e01b600052602160045260246000fd5b9052565b6000815160c084526123df60c0850182611fdc565b90506020830151602085015260018060a01b036040840151166040850152606083015160608501526080830151608085015260a08301516108f860a08601826123a8565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561247857603f198886030184526124668583516123ca565b9450928501929085019060010161244a565b5092979650505050505050565b60c08152600061249860c0830189611fdc565b602083018890526001600160a01b0387166040840152606083018690526080830185905290506124cb60a08301846123a8565b979650505050505050565b6000806000606084860312156124eb57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561251857600080fd5b843567ffffffffffffffff81111561252f57600080fd5b8501601f8101871361254057600080fd5b61254f87823560208401612115565b945050602085013592506040850135915060608501356004811061257257600080fd5b939692955090935050565b602081526000611f9860208301846123ca565b6000602082840312156125a257600080fd5b611f9882611f1c565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561263957603f19898403018552815160808151855288820151818a87015261260082870182611fdc565b91505087820151858203898701526126188282611fdc565b606093840151969093019590955250948701949250908601906001016125d2565b509098975050505050505050565b6000806040838503121561265a57600080fd5b61266383611f1c565b915061267160208401611f1c565b90509250929050565b600080600080600060a0868803121561269257600080fd5b61269b86611f1c565b94506126a960208701611f1c565b93506040860135925060608601359150608086013567ffffffffffffffff8111156126d357600080fd5b61223088828901612173565b600181811c908216806126f357607f821691505b60208210810361271357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156105e3576105e3612719565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600182016127b8576127b8612719565b5060010190565b818103818111156105e3576105e3612719565b601f82111561281857600081815260208120601f850160051c810160208610156127f95750805b601f850160051c820191505b818110156119fb57828155600101612805565b505050565b815167ffffffffffffffff8111156128375761283761203d565b61284b8161284584546126df565b846127d2565b602080601f83116001811461288057600084156128685750858301515b600019600386901b1c1916600185901b1785556119fb565b600085815260208120601f198616915b828110156128af57888601518255948401946001909101908401612890565b50858210156128cd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516128ef818460208701611fb8565b9190910192915050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061299b6040830185612308565b82810360208401526129ad8185612308565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906124cb90830184611fdc565b600060208284031215612a0257600080fd5b8151611f9881611f62565b600060033d1115612a265760046000803e5060005160e01c5b90565b600060443d1015612a375790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612a6757505050505090565b8285019150815181811115612a7f5750505050505090565b843d8701016020828501011115612a995750505050505090565b612aa860208286010187612053565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090612b2790830186612308565b8281036060840152612b398186612308565b90508281036080840152612b4d8185611fdc565b9897505050505050505056fea26469706673582212205593553e3df9b8a3c35ab587ae7399c520bbcec71855405ea0d07dacbd9baafc64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "BuyPlot(uint256,uint256,uint256)": {
        "params": {
          "expectedPay": "This is the expected amount the user should send to the smart contract",
          "purchaseAmt": "this is the amount of uints that the user wants to purchase",
          "tokenId": "this is the Id of the token on the ListedToken array"
        },
        "returns": {
          "Id": "this holds the return value of the token that was bought",
          "amountBought": "this holds the value of the token that was successfully bought"
        }
      },
      "CreateAsset(string,uint256,uint256,uint8)": {
        "params": {
          "amtToSell": "Amount willing to see to investors",
          "estateType": "Estate Type enum",
          "name": "The name of asset",
          "totalPlots": "Total availiable plots"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "stateVariables": {
      "auction": {
        "details": "This mapping is for tracking Auctions "
      },
      "availaibleTokenAmount": {
        "details": "mapping of tokenId to amount sold"
      },
      "tokenDataMapping": {
        "details": "This mapping is the mapping of tokenId to TokenData"
      },
      "tokenMapping": {
        "details": "Mapping for tokenId -> tokendata"
      },
      "totalYields": {
        "details": "This is the user's total yields gained"
      },
      "userTokens": {
        "details": "This ties all the users to their respective tokens"
      },
      "userTvl": {
        "details": "This refers to the user's total value bought"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "CreateAsset(string,uint256,uint256,uint8)": {
        "notice": "function to list and provide tokens of an asset"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/EstatePool.sol:EstatePool",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 31,
        "contract": "contracts/EstatePool.sol:EstatePool",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 33,
        "contract": "contracts/EstatePool.sol:EstatePool",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1928,
        "contract": "contracts/EstatePool.sol:EstatePool",
        "label": "ListedTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(TokenData)2048_storage)dyn_storage"
      },
      {
        "astId": 1930,
        "contract": "contracts/EstatePool.sol:EstatePool",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1932,
        "contract": "contracts/EstatePool.sol:EstatePool",
        "label": "auctionCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1937,
        "contract": "contracts/EstatePool.sol:EstatePool",
        "label": "availaibleTokenAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1943,
        "contract": "contracts/EstatePool.sol:EstatePool",
        "label": "tokenMapping",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(TokenData)2048_storage)"
      },
      {
        "astId": 1948,
        "contract": "contracts/EstatePool.sol:EstatePool",
        "label": "userTvl",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1953,
        "contract": "contracts/EstatePool.sol:EstatePool",
        "label": "totalYields",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1960,
        "contract": "contracts/EstatePool.sol:EstatePool",
        "label": "userTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_struct(TokenData)2048_storage)dyn_storage)"
      },
      {
        "astId": 1966,
        "contract": "contracts/EstatePool.sol:EstatePool",
        "label": "tokenDataMapping",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(TokenData)2048_storage)"
      },
      {
        "astId": 1972,
        "contract": "contracts/EstatePool.sol:EstatePool",
        "label": "auction",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(AuctionData)2068_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(TokenData)2048_storage)dyn_storage": {
        "base": "t_struct(TokenData)2048_storage",
        "encoding": "dynamic_array",
        "label": "struct EstatePool.TokenData[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(EstateType)2073": {
        "encoding": "inplace",
        "label": "enum EstatePool.EstateType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(TokenData)2048_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EstatePool.TokenData[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(TokenData)2048_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(AuctionData)2068_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EstatePool.AuctionData)",
        "numberOfBytes": "32",
        "value": "t_struct(AuctionData)2068_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenData)2048_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EstatePool.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)2048_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AuctionData)2068_storage": {
        "encoding": "inplace",
        "label": "struct EstatePool.AuctionData",
        "members": [
          {
            "astId": 2059,
            "contract": "contracts/EstatePool.sol:EstatePool",
            "label": "TokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2061,
            "contract": "contracts/EstatePool.sol:EstatePool",
            "label": "AmountToSell",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2063,
            "contract": "contracts/EstatePool.sol:EstatePool",
            "label": "Owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2065,
            "contract": "contracts/EstatePool.sol:EstatePool",
            "label": "auctionId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2067,
            "contract": "contracts/EstatePool.sol:EstatePool",
            "label": "completed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(TokenData)2048_storage": {
        "encoding": "inplace",
        "label": "struct EstatePool.TokenData",
        "members": [
          {
            "astId": 2036,
            "contract": "contracts/EstatePool.sol:EstatePool",
            "label": "Name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2038,
            "contract": "contracts/EstatePool.sol:EstatePool",
            "label": "Id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2040,
            "contract": "contracts/EstatePool.sol:EstatePool",
            "label": "Owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2042,
            "contract": "contracts/EstatePool.sol:EstatePool",
            "label": "TotalPlots",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2044,
            "contract": "contracts/EstatePool.sol:EstatePool",
            "label": "AmountToBeSold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2047,
            "contract": "contracts/EstatePool.sol:EstatePool",
            "label": "Type",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(EstateType)2073"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}